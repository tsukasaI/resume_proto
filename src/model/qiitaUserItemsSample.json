[{"rendered_body":"\u003ch1 data-sourcepos=\"1:1-1:14\"\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\u003cp data-sourcepos=\"2:1-3:124\"\u003e気づけば2022年も12月末になり、仕事もプライベートも節目の振り返りが多くなってきました。\u003cbr\u003e\n著者は今年4月に転職をして環境を新しくしたので、変化をまとめたいと思い投稿しました。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"5:1-5:26\"\u003e\n\u003cspan id=\"今年変化したこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%8A%E5%B9%B4%E5%A4%89%E5%8C%96%E3%81%97%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e今年変化したこと\u003c/h1\u003e\n\u003cp data-sourcepos=\"6:1-7:99\"\u003eここからは転職する前と後を連ねて書いていきます。\u003cbr\u003e\nどう書くと比較できるかわかっていないので、リストで表記してみます。\u003c/p\u003e\n\u003cp data-sourcepos=\"9:1-9:93\"\u003e転職前は通常フォント、転職後は太いフォントで記述していきます。\u003c/p\u003e\n\u003cul data-sourcepos=\"11:1-13:0\"\u003e\n\u003cli data-sourcepos=\"11:1-11:11\"\u003e転職前\u003c/li\u003e\n\u003cli data-sourcepos=\"12:1-13:0\"\u003e\u003cstrong\u003e転職後\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 data-sourcepos=\"14:1-14:33\"\u003e\n\u003cspan id=\"エンジニアリング関連\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E9%96%A2%E9%80%A3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eエンジニアリング関連\u003c/h2\u003e\n\u003cp data-sourcepos=\"15:1-15:54\"\u003eまずは使用している技術を書いてみます\u003c/p\u003e\n\u003cul data-sourcepos=\"17:1-30:0\"\u003e\n\u003cli data-sourcepos=\"17:1-17:13\"\u003ePHP Laravel\u003c/li\u003e\n\u003cli data-sourcepos=\"18:1-18:14\"\u003ePython Flask\u003c/li\u003e\n\u003cli data-sourcepos=\"19:1-19:17\"\u003e\u003cstrong\u003eGo Gin Gorm\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"20:1-20:17\"\u003eJavaScript Vue2\u003c/li\u003e\n\u003cli data-sourcepos=\"21:1-21:21\"\u003e\u003cstrong\u003eTypeScript Vue3\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"22:1-22:15\"\u003e\u003cstrong\u003eTerraform\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"23:1-30:0\"\u003eAWS\n\u003cul data-sourcepos=\"24:5-30:0\"\u003e\n\u003cli data-sourcepos=\"24:5-24:9\"\u003eEC2\u003c/li\u003e\n\u003cli data-sourcepos=\"25:5-25:9\"\u003eRDS\u003c/li\u003e\n\u003cli data-sourcepos=\"26:5-26:17\"\u003e\u003cstrong\u003eECS ECR\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"27:5-27:16\"\u003e\u003cstrong\u003eLambda\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"28:5-30:0\"\u003e\u003cstrong\u003eDynamoDB\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 data-sourcepos=\"31:1-31:12\"\u003e\n\u003cspan id=\"働き方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%83%8D%E3%81%8D%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e働き方\u003c/h2\u003e\n\u003cul data-sourcepos=\"32:1-37:0\"\u003e\n\u003cli data-sourcepos=\"32:1-32:33\"\u003e週5日出社（出社必須）\u003c/li\u003e\n\u003cli data-sourcepos=\"33:1-33:71\"\u003e\u003cstrong\u003e週2~3出社(リモートと出社のハイブリッドワーク)\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"34:1-34:44\"\u003e隔週1で2H講師を招待して勉強会\u003c/li\u003e\n\u003cli data-sourcepos=\"35:1-37:0\"\u003e\u003cstrong\u003e金曜午前は勉強時間に充ててOK\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 data-sourcepos=\"38:1-38:24\"\u003e\n\u003cspan id=\"研修業務関連\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%A0%94%E4%BF%AE%E6%A5%AD%E5%8B%99%E9%96%A2%E9%80%A3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e研修、業務関連\u003c/h2\u003e\n\u003cul data-sourcepos=\"39:1-44:0\"\u003e\n\u003cli data-sourcepos=\"39:1-39:143\"\u003e半年続けて要求される機能の開発は難しくなく、タスクを通じて成長できるのは限界があると感じていた\u003c/li\u003e\n\u003cli data-sourcepos=\"40:1-40:102\"\u003e\u003cstrong\u003e入社月から研修で要求されるレベルの高さを痛感し、鼻をへし折られる\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"41:1-41:114\"\u003e\u003cstrong\u003e要件定義、設計を任されること、テストの設計など開発以外のスキル不足を痛感\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"42:1-42:120\"\u003e\u003cstrong\u003e開発時にチャレンジングな実装に対面。チームメンバーも未経験の技術を使って実装\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"43:1-44:0\"\u003e\u003cstrong\u003eメンバーの入れ替わりが激しく、かつコードの統一性が著しくかけていたためリファクタリングを担当。自らパターンを提案し導入まで経験\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 data-sourcepos=\"45:1-45:33\"\u003e\n\u003cspan id=\"その他思いついたこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E6%80%9D%E3%81%84%E3%81%A4%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eその他思いついたこと\u003c/h2\u003e\n\u003cul data-sourcepos=\"46:1-51:0\"\u003e\n\u003cli data-sourcepos=\"46:1-46:180\"\u003e未経験からエンジニアへの転職とエンジニアからエンジニアの転職は自分の培ったスキルが通じる/足りないを知るキッカケとなった\u003c/li\u003e\n\u003cli data-sourcepos=\"47:1-47:116\"\u003e前職では技術にはある程度自信があり、実現できない動きは無いと思いこんでいた。\u003c/li\u003e\n\u003cli data-sourcepos=\"48:1-48:156\"\u003e\u003cstrong\u003e実装だけは意味がなく、テストは十分であるか、性能は問題ないかなど品質保証に対して考えるようになった。\u003c/strong\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"49:1-51:0\"\u003e\u003cstrong\u003eバグの修正に対してはどこで治すのが適切なのかを考えて対応するようになった\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 data-sourcepos=\"52:1-52:11\"\u003e\n\u003cspan id=\"最後に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e最後に\u003c/h1\u003e\n\u003cp data-sourcepos=\"53:1-54:204\"\u003eマンネリ化していたら転職をして環境を変えてみることも手だと思います。\u003cbr\u003e\nこれまでの自分のスキルが外ではどこまで通じるか、これからのキャリアをどうするかなど一段と深い思考が得られ、成長のスピードも上げられます。\u003c/p\u003e\n\u003cp data-sourcepos=\"56:1-56:36\"\u003e良いエンジニアライフを。\u003c/p\u003e\n","body":"# はじめに\n気づけば2022年も12月末になり、仕事もプライベートも節目の振り返りが多くなってきました。\n著者は今年4月に転職をして環境を新しくしたので、変化をまとめたいと思い投稿しました。\n\n# 今年変化したこと\nここからは転職する前と後を連ねて書いていきます。\nどう書くと比較できるかわかっていないので、リストで表記してみます。\n\n転職前は通常フォント、転職後は太いフォントで記述していきます。\n\n- 転職前\n- **転職後**\n\n## エンジニアリング関連\nまずは使用している技術を書いてみます\n\n- PHP Laravel\n- Python Flask\n- **Go Gin Gorm**\n- JavaScript Vue2\n- **TypeScript Vue3**\n- **Terraform**\n- AWS\n    - EC2\n    - RDS\n    - **ECS ECR**\n    - **Lambda**\n    - **DynamoDB**\n\n\n## 働き方\n- 週5日出社（出社必須）\n- **週2~3出社(リモートと出社のハイブリッドワーク)**\n- 隔週1で2H講師を招待して勉強会\n- **金曜午前は勉強時間に充ててOK**\n\n\n## 研修、業務関連\n- 半年続けて要求される機能の開発は難しくなく、タスクを通じて成長できるのは限界があると感じていた\n- **入社月から研修で要求されるレベルの高さを痛感し、鼻をへし折られる**\n- **要件定義、設計を任されること、テストの設計など開発以外のスキル不足を痛感**\n- **開発時にチャレンジングな実装に対面。チームメンバーも未経験の技術を使って実装**\n- **メンバーの入れ替わりが激しく、かつコードの統一性が著しくかけていたためリファクタリングを担当。自らパターンを提案し導入まで経験**\n\n## その他思いついたこと\n- 未経験からエンジニアへの転職とエンジニアからエンジニアの転職は自分の培ったスキルが通じる/足りないを知るキッカケとなった\n- 前職では技術にはある程度自信があり、実現できない動きは無いと思いこんでいた。\n- **実装だけは意味がなく、テストは十分であるか、性能は問題ないかなど品質保証に対して考えるようになった。**\n- **バグの修正に対してはどこで治すのが適切なのかを考えて対応するようになった**\n\n\n# 最後に\nマンネリ化していたら転職をして環境を変えてみることも手だと思います。\nこれまでの自分のスキルが外ではどこまで通じるか、これからのキャリアをどうするかなど一段と深い思考が得られ、成長のスピードも上げられます。\n\n良いエンジニアライフを。\n","coediting":false,"comments_count":0,"created_at":"2022-12-25T10:59:06+09:00","group":null,"id":"3bee073d7f79f00d5f2a","likes_count":3,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"転職","versions":[]}],"title":"転職する前と後","updated_at":"2022-12-25T11:00:55+09:00","url":"https://qiita.com/tsukasaI/items/3bee073d7f79f00d5f2a","user":{"description":"","facebook_id":"","followees_count":1,"followers_count":2,"github_login_name":"tsukasaI","id":"tsukasaI","items_count":6,"linkedin_id":"","location":"","name":"Tsukasa INOUE","organization":"","permanent_id":655827,"profile_image_url":"https://avatars1.githubusercontent.com/u/65926267?v=4","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003ch1 data-sourcepos=\"1:1-1:8\"\u003e\n\u003cspan id=\"概要\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A6%82%E8%A6%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e概要\u003c/h1\u003e\n\u003cp data-sourcepos=\"3:1-4:254\"\u003eGoで日時を司る型はtime.Timeでナノ秒まで適用される。\u003cbr\u003e\nこのtime.Timeには比較演算子の\u003ccode\u003e==\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003eが使えず\u003ca href=\"https://pkg.go.dev/time#Time.After\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAfter\u003c/a\u003e, \u003ca href=\"https://pkg.go.dev/time#Time.Before\" rel=\"nofollow noopener\" target=\"_blank\"\u003eBefore\u003c/a\u003e, \u003ca href=\"https://pkg.go.dev/time#Time.Equal\" rel=\"nofollow noopener\" target=\"_blank\"\u003eEqual\u003c/a\u003eメソッドを使って比較する必要がある。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"6:1-6:20\"\u003e\n\u003cspan id=\"チートシート\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eチートシート\u003c/h1\u003e\n\u003ctable data-sourcepos=\"8:1-18:34\"\u003e\n\u003cthead\u003e\n\u003ctr data-sourcepos=\"8:1-8:41\"\u003e\n\u003cth data-sourcepos=\"8:2-8:20\"\u003e時間の関係\u003c/th\u003e\n\u003cth data-sourcepos=\"8:22-8:31\"\u003e記述\u003c/th\u003e\n\u003cth data-sourcepos=\"8:33-8:40\"\u003e返値\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr data-sourcepos=\"10:1-10:33\"\u003e\n\u003ctd data-sourcepos=\"10:2-10:10\"\u003ea \u0026gt; b\u003c/td\u003e\n\u003ctd data-sourcepos=\"10:12-10:25\"\u003ea.After(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"10:27-10:32\"\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"11:1-11:34\"\u003e\n\u003ctd data-sourcepos=\"11:2-11:10\"\u003ea \u0026gt; b\u003c/td\u003e\n\u003ctd data-sourcepos=\"11:12-11:25\"\u003ea.Equal(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"11:27-11:33\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"12:1-12:35\"\u003e\n\u003ctd data-sourcepos=\"12:2-12:10\"\u003ea \u0026gt; b\u003c/td\u003e\n\u003ctd data-sourcepos=\"12:12-12:26\"\u003ea.Before(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"12:28-12:34\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"13:1-13:34\"\u003e\n\u003ctd data-sourcepos=\"13:2-13:10\"\u003ea = b\u003c/td\u003e\n\u003ctd data-sourcepos=\"13:12-13:25\"\u003ea.After(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"13:27-13:33\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"14:1-14:33\"\u003e\n\u003ctd data-sourcepos=\"14:2-14:10\"\u003ea = b\u003c/td\u003e\n\u003ctd data-sourcepos=\"14:12-14:25\"\u003ea.Equal(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"14:27-14:32\"\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"15:1-15:35\"\u003e\n\u003ctd data-sourcepos=\"15:2-15:10\"\u003ea = b\u003c/td\u003e\n\u003ctd data-sourcepos=\"15:12-15:26\"\u003ea.Before(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"15:28-15:34\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"16:1-16:34\"\u003e\n\u003ctd data-sourcepos=\"16:2-16:10\"\u003ea \u0026lt; b\u003c/td\u003e\n\u003ctd data-sourcepos=\"16:12-16:25\"\u003ea.After(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"16:27-16:33\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"17:1-17:34\"\u003e\n\u003ctd data-sourcepos=\"17:2-17:10\"\u003ea \u0026lt; b\u003c/td\u003e\n\u003ctd data-sourcepos=\"17:12-17:25\"\u003ea.Equal(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"17:27-17:33\"\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr data-sourcepos=\"18:1-18:34\"\u003e\n\u003ctd data-sourcepos=\"18:2-18:10\"\u003ea \u0026lt; b\u003c/td\u003e\n\u003ctd data-sourcepos=\"18:12-18:26\"\u003ea.Before(b)\u003c/td\u003e\n\u003ctd data-sourcepos=\"18:28-18:33\"\u003etrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 data-sourcepos=\"20:1-20:14\"\u003e\n\u003cspan id=\"ポイント\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eポイント\u003c/h1\u003e\n\u003cp data-sourcepos=\"21:1-22:155\"\u003etime.TimeのAfter、Beforeはイコールを含まない評価をするようになっています。\u003cbr\u003e\nそのため \u003cstrong\u003ea \u0026lt;= b\u003c/strong\u003e が \u003cstrong\u003etrue\u003c/strong\u003e を返す、つまりイコールを含むような評価をしたい場合は以下の2パターンで記述する。\u003c/p\u003e\n\u003col data-sourcepos=\"23:1-25:0\"\u003e\n\u003cli data-sourcepos=\"23:1-23:30\"\u003e\u003ccode\u003ea.Before(b) || a.Equal(b)\u003c/code\u003e\u003c/li\u003e\n\u003cli data-sourcepos=\"24:1-25:0\"\u003e\u003ccode\u003e!a.After(b)\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp data-sourcepos=\"26:1-26:99\"\u003e個人的には2パターン目が短くてif文に含める時にはよく見ると思います。\u003c/p\u003e\n","body":"# 概要\n\nGoで日時を司る型はtime.Timeでナノ秒まで適用される。\nこのtime.Timeには比較演算子の`==`, `\u003c`, `\u003e`が使えず[After](https://pkg.go.dev/time#Time.After), [Before](https://pkg.go.dev/time#Time.Before), [Equal](https://pkg.go.dev/time#Time.Equal)メソッドを使って比較する必要がある。\n\n# チートシート\n\n|  時間の関係  |  記述  | 返値 |\n| ---- | ---- | ---- |\n|  a \u003e b  |  a.After(b)  | true |\n|  a \u003e b  |  a.Equal(b)  | false |\n|  a \u003e b  |  a.Before(b)  | false |\n|  a = b  |  a.After(b)  | false |\n|  a = b  |  a.Equal(b)  | true |\n|  a = b  |  a.Before(b)  | false |\n|  a \u003c b  |  a.After(b)  | false |\n|  a \u003c b  |  a.Equal(b)  | false |\n|  a \u003c b  |  a.Before(b)  | true |\n\n# ポイント\ntime.TimeのAfter、Beforeはイコールを含まない評価をするようになっています。\nそのため **a \u003c= b** が **true** を返す、つまりイコールを含むような評価をしたい場合は以下の2パターンで記述する。\n1. `a.Before(b) || a.Equal(b)`\n1. `!a.After(b)` \n\n個人的には2パターン目が短くてif文に含める時にはよく見ると思います。\n","coediting":false,"comments_count":0,"created_at":"2022-12-22T12:15:00+09:00","group":null,"id":"71d9caa69182d43401fe","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Go","versions":[]}],"title":"Goでの日付比較チートシート","updated_at":"2022-12-23T07:05:32+09:00","url":"https://qiita.com/tsukasaI/items/71d9caa69182d43401fe","user":{"description":"","facebook_id":"","followees_count":1,"followers_count":2,"github_login_name":"tsukasaI","id":"tsukasaI","items_count":6,"linkedin_id":"","location":"","name":"Tsukasa INOUE","organization":"","permanent_id":655827,"profile_image_url":"https://avatars1.githubusercontent.com/u/65926267?v=4","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003ch1 data-sourcepos=\"1:1-1:8\"\u003e\n\u003cspan id=\"背景\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%83%8C%E6%99%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e背景\u003c/h1\u003e\n\u003cp data-sourcepos=\"2:1-2:224\"\u003eプルリクを出している最中に別の作業をしていたり、コミットしたくないけどとりあえずどこかに保存させておきたい場合に使えるstashを使うと便利なのを紹介したい\u003c/p\u003e\n\u003ch1 data-sourcepos=\"4:1-4:41\"\u003e\n\u003cspan id=\"覚えて欲しいコマンドと効果\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A6%9A%E3%81%88%E3%81%A6%E6%AC%B2%E3%81%97%E3%81%84%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E5%8A%B9%E6%9E%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e覚えて欲しいコマンドと効果\u003c/h1\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"6:1-12:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit stash \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e \u003cspan class=\"c\"\u003e# untracked file を含めて退避する\u003c/span\u003e\n\ngit stash list \u003cspan class=\"c\"\u003e# 一覧表示をする\u003c/span\u003e\n\ngit stash pop \u003cspan class=\"c\"\u003e# 最後のshashを退避から取り出し、対比場所から削除する\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003ch1 data-sourcepos=\"14:1-14:17\"\u003e\n\u003cspan id=\"使ってみた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使ってみた\u003c/h1\u003e\n\u003cp data-sourcepos=\"16:1-16:21\"\u003eブランチの準備\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"18:1-20:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit switch \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e branch_a\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"22:1-22:72\"\u003etest_a.mdを作成後、以下のようにファイルを保存する。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"markdown\" data-sourcepos=\"23:1-28:3\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003etest_a.md\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003e# aでの作業\u003c/span\u003e\n\nbranch_aで作業しました\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp data-sourcepos=\"30:1-30:14\"\u003estashをする\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"31:1-34:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit stash \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Saved working directory and index state WIP on branch_a: xxxxxx add workspace setting\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"36:1-36:65\"\u003eこれでworkspaceの変更分がstash領域に保存される。\u003c/p\u003e\n\u003cp data-sourcepos=\"38:1-38:65\"\u003eちなみにstashの一覧を確認するコマンドはこれ。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"40:1-42:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit stash list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"44:1-44:36\"\u003e続いて別のブランチに移動\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"46:1-49:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit switch main \u003cspan class=\"c\"\u003e# mainブランチに移動して\u003c/span\u003e\ngit switch \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e branch_b \u003cspan class=\"c\"\u003e# branch_b ブランチを切る\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"51:1-51:72\"\u003etest_b.mdを作成後、以下のようにファイルを保存する。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"markdown\" data-sourcepos=\"52:1-57:3\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003etest_b.md\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003e# bでの作業\u003c/span\u003e\n\nbranch_bで作業しました\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp data-sourcepos=\"59:1-59:41\"\u003ebranch_bでの作業をコミットする\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"61:1-64:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\ngit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"add test_b.md\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"66:1-66:56\"\u003ebranch_aに切り替えて、退避した変更を戻す\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"67:1-70:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit switch branch_a\ngit stash pop\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"72:1-72:63\"\u003eすると退避させた変更がworkspaceに戻ってくる。\u003c/p\u003e\n\u003cp data-sourcepos=\"74:1-74:130\"\u003eこれを実行するとstashの一覧からは消えるので、\u003ccode\u003egit stash list\u003c/code\u003eをしたらbranch_aのstashは削除される。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"76:1-76:8\"\u003e\n\u003cspan id=\"補足\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A3%9C%E8%B6%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e補足\u003c/h1\u003e\n\u003ch2 data-sourcepos=\"78:1-78:26\"\u003e\n\u003cspan id=\"stashにメモを残す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stash%E3%81%AB%E3%83%A1%E3%83%A2%E3%82%92%E6%AE%8B%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estashにメモを残す\u003c/h2\u003e\n\u003cp data-sourcepos=\"80:1-80:131\"\u003estashするだけだと最後のコミットのメッセージが表示されるが、任意のメモを残すこともできる。\u003c/p\u003e\n\u003cp data-sourcepos=\"82:1-82:24\"\u003eコマンドは以下。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"84:1-86:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit stash save \u003cspan class=\"s2\"\u003e\"任意のメッセージ\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"88:1-88:22\"\u003elistを確認すると\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"89:1-91:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003estash@{0}: On main: 任意のメッセージ\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"92:1-92:78\"\u003eのように\u003ccode\u003estash@{ID}: ブランチ: \"メッセージ\"\u003c/code\u003eと表示される。\u003c/p\u003e\n\u003ch2 data-sourcepos=\"95:1-95:54\"\u003e\n\u003cspan id=\"退避した変更を戻すコマンドについて\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%80%80%E9%81%BF%E3%81%97%E3%81%9F%E5%A4%89%E6%9B%B4%E3%82%92%E6%88%BB%E3%81%99%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e退避した変更を戻すコマンドについて\u003c/h2\u003e\n\u003cp data-sourcepos=\"96:1-96:54\"\u003e退避した変更を戻す方法はもう一つあり\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"97:1-99:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003egit stash apply stash\u003cspan class=\"o\"\u003e{\u003c/span\u003e0\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"100:1-100:15\"\u003eでも可能。\u003c/p\u003e\n\u003cp data-sourcepos=\"102:1-102:20\"\u003eapplyとpopの差は\u003c/p\u003e\n\u003cul data-sourcepos=\"103:1-106:0\"\u003e\n\u003cli data-sourcepos=\"103:1-103:89\"\u003eapply: 退避した差分をworkspaceに戻してもstashした内容を削除しない\u003c/li\u003e\n\u003cli data-sourcepos=\"104:1-106:0\"\u003epop: 退避した差分をworkspaceに戻してもstashした内容を削除する\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp data-sourcepos=\"107:1-108:18\"\u003e個人的なおすすめとしてはapplyは使わないようにして、popを使うこと。\u003cbr\u003e\n理由としては\u003c/p\u003e\n\u003cul data-sourcepos=\"109:1-111:0\"\u003e\n\u003cli data-sourcepos=\"109:1-109:73\"\u003e削除するの忘れて大量のstashがあるとわからなくなる\u003c/li\u003e\n\u003cli data-sourcepos=\"110:1-111:0\"\u003e複数の作業を並列するとはいえ1人で3つ以上の作業が同時に走らせることはあまりない\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp data-sourcepos=\"112:1-112:166\"\u003eという感じで、最近は \u003ca href=\"#%E8%A6%9A%E3%81%88%E3%81%A6%E6%AC%B2%E3%81%97%E3%81%84%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E5%8A%B9%E6%9E%9C\"\u003e覚えて欲しいコマンドと効果\u003c/a\u003eの3つだけで事足りるようにしている。\u003c/p\u003e\n\u003ch2 data-sourcepos=\"114:1-114:56\"\u003e\n\u003cspan id=\"複数のstashがある時のpopの挙動について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A4%87%E6%95%B0%E3%81%AEstash%E3%81%8C%E3%81%82%E3%82%8B%E6%99%82%E3%81%AEpop%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e複数のstashがある時のpopの挙動について\u003c/h2\u003e\n\u003cp data-sourcepos=\"115:1-115:153\"\u003epop は引数に名前を指定せずに使用可能で、複数のstashがある場合は\u003cstrong\u003e最後にstashした内容\u003c/strong\u003eがworkspaceに反映される。\u003c/p\u003e\n\u003cp data-sourcepos=\"117:1-117:9\"\u003eつまり\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"118:1-122:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit stash list\nstash\u003cspan class=\"o\"\u003e{\u003c/span\u003e0\u003cspan class=\"o\"\u003e}\u003c/span\u003e ... \u003cspan class=\"c\"\u003e# 後のstash\u003c/span\u003e\nstash\u003cspan class=\"o\"\u003e{\u003c/span\u003e1\u003cspan class=\"o\"\u003e}\u003c/span\u003e ... \u003cspan class=\"c\"\u003e# 先のstash\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"123:1-123:92\"\u003eとある時に \u003ccode\u003egit stash pop\u003c/code\u003e を実行すると stash{0}がworkspaceに反映される。\u003c/p\u003e\n","body":"# 背景\nプルリクを出している最中に別の作業をしていたり、コミットしたくないけどとりあえずどこかに保存させておきたい場合に使えるstashを使うと便利なのを紹介したい\n\n# 覚えて欲しいコマンドと効果\n\n```bash\ngit stash -u # untracked file を含めて退避する\n\ngit stash list # 一覧表示をする\n\ngit stash pop # 最後のshashを退避から取り出し、対比場所から削除する\n```\n\n# 使ってみた\n\nブランチの準備\n\n```bash\ngit switch -c branch_a\n```\n\ntest_a.mdを作成後、以下のようにファイルを保存する。\n```markdown:test_a.md\n# aでの作業\n\nbranch_aで作業しました\n\n```\n\nstashをする\n```bash\ngit stash -u\n# Saved working directory and index state WIP on branch_a: xxxxxx add workspace setting\n```\n\nこれでworkspaceの変更分がstash領域に保存される。\n\nちなみにstashの一覧を確認するコマンドはこれ。\n\n```bash\ngit stash list\n```\n\n続いて別のブランチに移動\n\n```bash\ngit switch main # mainブランチに移動して\ngit switch -c branch_b # branch_b ブランチを切る\n```\n\ntest_b.mdを作成後、以下のようにファイルを保存する。\n```markdown:test_b.md\n# bでの作業\n\nbranch_bで作業しました\n\n```\n\nbranch_bでの作業をコミットする\n\n```bash\ngit add .\ngit commit -m \"add test_b.md\"\n```\n\nbranch_aに切り替えて、退避した変更を戻す\n```bash\ngit switch branch_a\ngit stash pop\n```\n\nすると退避させた変更がworkspaceに戻ってくる。\n\nこれを実行するとstashの一覧からは消えるので、`git stash list`をしたらbranch_aのstashは削除される。\n\n# 補足\n\n## stashにメモを残す\n\nstashするだけだと最後のコミットのメッセージが表示されるが、任意のメモを残すこともできる。\n\nコマンドは以下。\n\n```bash\ngit stash save \"任意のメッセージ\" -u\n```\n\nlistを確認すると\n```\nstash@{0}: On main: 任意のメッセージ\n```\nのように`stash@{ID}: ブランチ: \"メッセージ\"`と表示される。\n\n\n## 退避した変更を戻すコマンドについて\n退避した変更を戻す方法はもう一つあり\n```bash\ngit stash apply stash{0}\n```\nでも可能。\n\napplyとpopの差は\n- apply: 退避した差分をworkspaceに戻してもstashした内容を削除しない\n- pop: 退避した差分をworkspaceに戻してもstashした内容を削除する\n\n\n個人的なおすすめとしてはapplyは使わないようにして、popを使うこと。\n理由としては\n- 削除するの忘れて大量のstashがあるとわからなくなる\n- 複数の作業を並列するとはいえ1人で3つ以上の作業が同時に走らせることはあまりない\n\nという感じで、最近は [覚えて欲しいコマンドと効果](#覚えて欲しいコマンドと効果)の3つだけで事足りるようにしている。\n\n## 複数のstashがある時のpopの挙動について\npop は引数に名前を指定せずに使用可能で、複数のstashがある場合は**最後にstashした内容**がworkspaceに反映される。\n\nつまり\n```bash\n$ git stash list\nstash{0} ... # 後のstash\nstash{1} ... # 先のstash\n```\nとある時に `git stash pop` を実行すると stash{0}がworkspaceに反映される。\n","coediting":false,"comments_count":0,"created_at":"2022-11-28T12:44:49+09:00","group":null,"id":"5f54f085e3a485f0661c","likes_count":5,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Git","versions":[]}],"title":"作業中の変更を一時退避させる git stash ハンズオン","updated_at":"2022-12-07T07:04:33+09:00","url":"https://qiita.com/tsukasaI/items/5f54f085e3a485f0661c","user":{"description":"","facebook_id":"","followees_count":1,"followers_count":2,"github_login_name":"tsukasaI","id":"tsukasaI","items_count":6,"linkedin_id":"","location":"","name":"Tsukasa INOUE","organization":"","permanent_id":655827,"profile_image_url":"https://avatars1.githubusercontent.com/u/65926267?v=4","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003ch1 data-sourcepos=\"1:1-1:32\"\u003e\n\u003cspan id=\"スタックトレースとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B9%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスタックトレースとは\u003c/h1\u003e\n\u003cp data-sourcepos=\"2:1-2:153\"\u003e実行中のプログラムがエラーを起こした際に、その直前まで実行していた関数やメソッドの履歴を表示すること。\u003c/p\u003e\n\u003cp data-sourcepos=\"4:1-4:177\"\u003eインタプリタ型言語の実行環境では準備されていて、デバッグ時にエラーを出した際にはスタックトレースが見られることが多い。\u003c/p\u003e\n\u003cp data-sourcepos=\"6:1-7:83\"\u003eサーバーサイドのデバッグにはこのスタックトレースがあるかないかで作業効率に天と地ほどの差を生む（と考えている）ので\u003cbr\u003e\nこの記事ではGoでのスタックトレースの実装方法を紹介する。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"9:1-9:16\"\u003e\n\u003cspan id=\"goでの実装\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#go%E3%81%A7%E3%81%AE%E5%AE%9F%E8%A3%85\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGoでの実装\u003c/h1\u003e\n\u003cp data-sourcepos=\"10:1-10:17\"\u003e環境: go1.17.10\u003c/p\u003e\n\u003cp data-sourcepos=\"12:1-13:26\"\u003e使用するパッケージ\u003cbr\u003e\n\u003ca href=\"https://pkg.go.dev/runtime\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://pkg.go.dev/runtime\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"go\" data-sourcepos=\"15:1-36:3\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emain.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\"runtime\"\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eshowStackTrace\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ept\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCaller\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efuncName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncForPC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ept\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"file=%s, line=%d, func=%v\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efuncName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003ch1 data-sourcepos=\"38:1-38:8\"\u003e\n\u003cspan id=\"解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解説\u003c/h1\u003e\n\u003cp data-sourcepos=\"39:1-40:176\"\u003e\u003ccode\u003eruntime.Caller(i)\u003c/code\u003eとすると4つの返り値を取得できる。\u003cbr\u003e\n返り値は順にプログラムのカウンター、ファイル名、行数となる。最後のokはboolean型で情報が取得できなかった時にはfalseとなる。\u003c/p\u003e\n\u003cp data-sourcepos=\"42:1-42:237\"\u003eそのためokがfalseになったときにループ処理を抜けるようにbreakするようにし、プログラムカウンターをインクリメントしていくとスタックトレースに必要な情報を取得できる。\u003c/p\u003e\n\u003cp data-sourcepos=\"44:1-44:117\"\u003eまた、\u003ccode\u003eruntime.FuncForPC(pt).Name()\u003c/code\u003eでプログラムカウンターに含まれる関数名を取得できる。\u003c/p\u003e\n\u003cp data-sourcepos=\"46:1-46:88\"\u003e最後にfmt.Printf や log.Printfで任意のフォーマットでロギングする。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"49:1-49:20\"\u003e\n\u003cspan id=\"実際の使い方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実際の使い方\u003c/h1\u003e\n\u003cp data-sourcepos=\"50:1-51:120\"\u003eスタックトレースはエラーの時に表示したい場合が多い。\u003cbr\u003e\nそのためエラーハンドリングの際に共通してスタックトレースを表示する実装例を示す。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"go\" data-sourcepos=\"53:1-86:3\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emain.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"errors\"\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"runtime\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003ehandleError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Do something\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eerrors\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"An error occurred\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003ehandleError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ept\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCaller\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eok\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efuncName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncForPC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ept\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"file=%s, line=%d, func=%v\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efuncName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp data-sourcepos=\"88:1-89:98\"\u003e上記の例では\u003ccode\u003edoSomething()\u003c/code\u003eでエラーを返すようにし\u003ccode\u003ehandleError(err)\u003c/code\u003eの引数にerrorを渡すようにした。\u003cbr\u003e\n\u003ccode\u003ehandleError(err)\u003c/code\u003eではerrorの内容とスタックトレースを出力するようにした。\u003c/p\u003e\n","body":"# スタックトレースとは\n実行中のプログラムがエラーを起こした際に、その直前まで実行していた関数やメソッドの履歴を表示すること。\n\nインタプリタ型言語の実行環境では準備されていて、デバッグ時にエラーを出した際にはスタックトレースが見られることが多い。\n\nサーバーサイドのデバッグにはこのスタックトレースがあるかないかで作業効率に天と地ほどの差を生む（と考えている）ので\nこの記事ではGoでのスタックトレースの実装方法を紹介する。\n\n# Goでの実装\n環境: go1.17.10\n\n使用するパッケージ\nhttps://pkg.go.dev/runtime\n\n```go:main.go\npackage main\n\nimport (\n    \"runtime\"\n    \"fmt\"\n)\n\nfunc showStackTrace() {\n    i := 0\n    for {\n        pt, file, line, ok := runtime.Caller(i)\n        if !ok {\n            break\n        }\n        funcName := runtime.FuncForPC(pt).Name()\n        fmt.Printf(\"file=%s, line=%d, func=%v\\n\", file, line, funcName)\n        i += 1\n    }\n}\n\n```\n\n# 解説\n`runtime.Caller(i)`とすると4つの返り値を取得できる。\n返り値は順にプログラムのカウンター、ファイル名、行数となる。最後のokはboolean型で情報が取得できなかった時にはfalseとなる。\n\nそのためokがfalseになったときにループ処理を抜けるようにbreakするようにし、プログラムカウンターをインクリメントしていくとスタックトレースに必要な情報を取得できる。\n\nまた、`runtime.FuncForPC(pt).Name()`でプログラムカウンターに含まれる関数名を取得できる。\n\n最後にfmt.Printf や log.Printfで任意のフォーマットでロギングする。\n\n\n# 実際の使い方\nスタックトレースはエラーの時に表示したい場合が多い。\nそのためエラーハンドリングの際に共通してスタックトレースを表示する実装例を示す。\n\n```go:main.go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"runtime\"\n)\n\nfunc main() {\n\tif err := doSomething(); err != nil {\n\t\thandleError(err)\n\t}\n}\n\nfunc doSomething() error {\n\tfmt.Println(\"Do something\")\n\treturn errors.New(\"An error occurred\")\n}\n\nfunc handleError(err error) {\n    fmt.Println(err.Error())\n\ti := 0\n    for {\n        pt, file, line, ok := runtime.Caller(i)\n        if !ok {\n            break\n        }\n        funcName := runtime.FuncForPC(pt).Name()\n        fmt.Printf(\"file=%s, line=%d, func=%v\\n\", file, line, funcName)\n        i += 1\n    }\n}\n```\n\n上記の例では`doSomething()`でエラーを返すようにし`handleError(err)`の引数にerrorを渡すようにした。\n`handleError(err)`ではerrorの内容とスタックトレースを出力するようにした。\n","coediting":false,"comments_count":0,"created_at":"2022-11-21T10:15:09+09:00","group":null,"id":"8e093d0898578dabe3fb","likes_count":7,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Go","versions":[]},{"name":"debug","versions":[]}],"title":"Goでスタックトレースを実装","updated_at":"2022-12-09T07:02:28+09:00","url":"https://qiita.com/tsukasaI/items/8e093d0898578dabe3fb","user":{"description":"","facebook_id":"","followees_count":1,"followers_count":2,"github_login_name":"tsukasaI","id":"tsukasaI","items_count":6,"linkedin_id":"","location":"","name":"Tsukasa INOUE","organization":"","permanent_id":655827,"profile_image_url":"https://avatars1.githubusercontent.com/u/65926267?v=4","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003ch1 data-sourcepos=\"1:1-1:14\"\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\u003cp data-sourcepos=\"3:1-4:67\"\u003e現在弊社で参画しているプロジェクトでdevcontainerを用いた開発に感動したため、\u003cbr\u003e\n自分で1から構築してみた備忘録として執筆した。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"7:1-7:20\"\u003e\n\u003cspan id=\"devcontainerとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#devcontainer%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edevcontainerとは\u003c/h1\u003e\n\u003cp data-sourcepos=\"8:1-9:105\"\u003eコンテナ技術であるDockerは言語のバージョンや設定をコードベースで統一することができるものの、\u003cbr\u003e\n各開発者間でのコードエディターの設定を統一することまではできなかった。\u003c/p\u003e\n\u003cp data-sourcepos=\"11:1-11:294\"\u003e例えばある開発者が保存時にフォーマッタを自動で適用する設定にしている一方で、別の開発者がその設定を行っていない場合にはソースコードの変更時に意図していない部分での変更が起こってしまう可能性がある。\u003c/p\u003e\n\u003cp data-sourcepos=\"13:1-14:195\"\u003eそんなエディター同士の設定を統一することができるのがdevcontainerである。\u003cbr\u003e\ndevcontainerを用いることでインストールするVSCodeの拡張機能やワークスペースの設定値もコンテナ内にコードベースで定義することが可能となる。\u003c/p\u003e\n\u003cp data-sourcepos=\"16:1-16:207\"\u003eつまりVSCodeの拡張機能を含めた環境を含めたコンテナを作成し、そのコンテナ中で開発することでエディタの設定を統一して開発することが可能となる。\u003c/p\u003e\n\u003cp data-sourcepos=\"18:1-18:204\"\u003eなので新規参入者が入る度に推奨する拡張機能を一つ一つインストールして、追加設定をして、、、という手間を一気に削減できるすごい技術である。\u003c/p\u003e\n\u003cp data-sourcepos=\"21:1-22:77\"\u003e参考）\u003cbr\u003e\n\u003ca href=\"https://code.visualstudio.com/docs/remote/containers#_trusting-your-workspace\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://code.visualstudio.com/docs/remote/containers#_trusting-your-workspace\u003c/a\u003e\u003c/p\u003e\n\u003cp data-sourcepos=\"24:1-24:61\"\u003e\u003cqiita-embed-ogp src=\"https://code.visualstudio.com/docs/remote/containers-tutorial\"\u003e\u003c/qiita-embed-ogp\u003e\u003c/p\u003e\n\u003ch1 data-sourcepos=\"26:1-26:26\"\u003e\n\u003cspan id=\"実際に使ってみた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実際に使ってみた\u003c/h1\u003e\n\u003cp data-sourcepos=\"27:1-27:58\"\u003e例としてGoとMySQLのAPIサーバーを構築した。\u003c/p\u003e\n\u003cp data-sourcepos=\"30:1-30:40\"\u003e作成方法はかんたん3ステップ\u003c/p\u003e\n\u003col data-sourcepos=\"31:1-35:0\"\u003e\n\u003cli data-sourcepos=\"31:1-31:71\"\u003eDev Containers: Try a Dev Container Sample.. でGoの環境を作成\u003c/li\u003e\n\u003cli data-sourcepos=\"32:1-32:83\"\u003e作成したDockerfileをビルドするdokcer-compose.yamlファイルを作成\u003c/li\u003e\n\u003cli data-sourcepos=\"33:1-35:0\"\u003e共通設定の対象を.vscode/setting.json に記述\u003cbr\u003e\n（今回はファイル末尾に改行を自動挿入、行末の半角スペースを削除を追加）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp data-sourcepos=\"36:1-36:146\"\u003eここから \u003cstrong\u003eDev Containers: Reopen in Container\u003c/strong\u003e でVSCodeがコンテナに接続してコンテナ上でファイルを編集できます。\u003c/p\u003e\n\u003cp data-sourcepos=\"38:1-39:43\"\u003eサンプルのソースコード\u003cbr\u003e\n\u003ca href=\"https://github.com/tsukasaI/go_devcontainer\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/tsukasaI/go_devcontainer\u003c/a\u003e\u003c/p\u003e\n\u003ch1 data-sourcepos=\"42:1-42:32\"\u003e\n\u003cspan id=\"番外編-goコードの解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%95%AA%E5%A4%96%E7%B7%A8-go%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e番外編 Goコードの解説\u003c/h1\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"go\" data-sourcepos=\"44:1-72:3\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emain.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"database/sql\"\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"net/http\"\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"s\"\u003e\"github.com/go-sql-driver/mysql\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003eopenDB\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eHandleFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"/\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eListenAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\":8001\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"Hello World\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eopenDB\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003esql\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"mysql\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"go_db:go_db@/go_db\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"DB opend\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp data-sourcepos=\"74:1-75:122\"\u003e今回はコンテナで起動したMySQLサーバーに接続し、成功したらターミナルで\u003ccode\u003e\"DB opend\"\u003c/code\u003eを出力し\u003cbr\u003e\nlocalhost:8001にアクセスすると\u003ccode\u003e\"Hello World\"\u003c/code\u003eとレスポンスが返ってくるプログラムを作成した。\u003c/p\u003e\n\u003cp data-sourcepos=\"77:1-77:103\"\u003edocker-composeのvolumeでローカルPCでチーム開発している方に是非使ってほしい。\u003c/p\u003e\n","body":"# はじめに\n\n現在弊社で参画しているプロジェクトでdevcontainerを用いた開発に感動したため、\n自分で1から構築してみた備忘録として執筆した。\n\n\n# devcontainerとは\nコンテナ技術であるDockerは言語のバージョンや設定をコードベースで統一することができるものの、\n各開発者間でのコードエディターの設定を統一することまではできなかった。\n\n例えばある開発者が保存時にフォーマッタを自動で適用する設定にしている一方で、別の開発者がその設定を行っていない場合にはソースコードの変更時に意図していない部分での変更が起こってしまう可能性がある。\n\nそんなエディター同士の設定を統一することができるのがdevcontainerである。\ndevcontainerを用いることでインストールするVSCodeの拡張機能やワークスペースの設定値もコンテナ内にコードベースで定義することが可能となる。\n\nつまりVSCodeの拡張機能を含めた環境を含めたコンテナを作成し、そのコンテナ中で開発することでエディタの設定を統一して開発することが可能となる。\n\nなので新規参入者が入る度に推奨する拡張機能を一つ一つインストールして、追加設定をして、、、という手間を一気に削減できるすごい技術である。\n\n\n参考）\nhttps://code.visualstudio.com/docs/remote/containers#_trusting-your-workspace\n\nhttps://code.visualstudio.com/docs/remote/containers-tutorial\n\n# 実際に使ってみた\n例としてGoとMySQLのAPIサーバーを構築した。\n\n\n作成方法はかんたん3ステップ\n1. Dev Containers: Try a Dev Container Sample.. でGoの環境を作成\n1. 作成したDockerfileをビルドするdokcer-compose.yamlファイルを作成\n1. 共通設定の対象を.vscode/setting.json に記述\n（今回はファイル末尾に改行を自動挿入、行末の半角スペースを削除を追加）\n\nここから **Dev Containers: Reopen in Container** でVSCodeがコンテナに接続してコンテナ上でファイルを編集できます。\n\nサンプルのソースコード\nhttps://github.com/tsukasaI/go_devcontainer\n\n\n# 番外編 Goコードの解説\n\n```go:main.go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\topenDB()\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8001\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World\")\n}\n\nfunc openDB() {\n\t_, err := sql.Open(\"mysql\", \"go_db:go_db@/go_db\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"DB opend\")\n}\n```\n\n今回はコンテナで起動したMySQLサーバーに接続し、成功したらターミナルで`\"DB opend\"`を出力し\nlocalhost:8001にアクセスすると`\"Hello World\"`とレスポンスが返ってくるプログラムを作成した。\n\ndocker-composeのvolumeでローカルPCでチーム開発している方に是非使ってほしい。\n","coediting":false,"comments_count":0,"created_at":"2022-11-10T10:58:59+09:00","group":null,"id":"11cdf5e97a59c260ba49","likes_count":6,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Docker","versions":[]},{"name":"VSCode","versions":[]},{"name":"RemoteContainer","versions":[]}],"title":"devcontainerの構築を試してみた","updated_at":"2022-12-01T07:02:42+09:00","url":"https://qiita.com/tsukasaI/items/11cdf5e97a59c260ba49","user":{"description":"","facebook_id":"","followees_count":1,"followers_count":2,"github_login_name":"tsukasaI","id":"tsukasaI","items_count":6,"linkedin_id":"","location":"","name":"Tsukasa INOUE","organization":"","permanent_id":655827,"profile_image_url":"https://avatars1.githubusercontent.com/u/65926267?v=4","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null},{"rendered_body":"\u003ch1 data-sourcepos=\"1:1-1:14\"\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\u003cp data-sourcepos=\"3:1-4:51\"\u003eこんにちは。\u003cbr\u003e\nARISE analyticsのエンジニアの井上です。\u003c/p\u003e\n\u003cp data-sourcepos=\"6:1-6:95\"\u003e弊社ARISE analyticsの技術ブログに先日Goについての記事を投稿しました。\u003c/p\u003e\n\u003cp data-sourcepos=\"8:1-8:89\"\u003eそのページは\u003ca href=\"https://www.ariseanalytics.com/activities/report/20220704/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003e\u003c/p\u003e\n\u003cp data-sourcepos=\"10:1-10:90\"\u003eこの記事ではサーバーサイド開発として使われるPHP, Javaと比較して\u003c/p\u003e\n\u003cp data-sourcepos=\"12:1-12:68\"\u003eGoの書き方とパフォーマンスについて語りました。\u003c/p\u003e\n\u003cp data-sourcepos=\"14:1-14:96\"\u003eベンチマークの比較を行う上で、なるべく処理方法を共通とするために\u003c/p\u003e\n\u003cp data-sourcepos=\"16:1-16:53\"\u003eGoらしさを排除した書き方をしました。\u003c/p\u003e\n\u003cp data-sourcepos=\"19:1-19:77\"\u003e本記事ではブログで紹介したGoらしくないソースコードを\u003c/p\u003e\n\u003cp data-sourcepos=\"21:1-21:68\"\u003e筆者が考えるGoらしいソースコードを紹介します。\u003c/p\u003e\n\u003ch1 data-sourcepos=\"24:1-24:31\"\u003e\n\u003cspan id=\"goらしいソースコード\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#go%E3%82%89%E3%81%97%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGoらしいソースコード\u003c/h1\u003e\n\u003cp data-sourcepos=\"26:1-26:77\"\u003eでは先にGoの特徴を踏まえたコードを見ていきましょう。\u003c/p\u003e\n\u003cp data-sourcepos=\"28:1-28:39\"\u003eまずはバブルソートの例です\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"30:1-70:3\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emain.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"math/rand\"\u003c/span\u003e\n\t\u003cspan class=\"s\"\u003e\"time\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003erand\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSeed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUnixNano\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003earray\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003earray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshuffle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\t\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebubbleSort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSince\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMicroseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eshuffle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003erand\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShuffle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ebubbleSort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\t\t\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp data-sourcepos=\"72:1-72:60\"\u003eそれではここからはGoの特徴を4つ紹介します\u003c/p\u003e\n\u003ch2 data-sourcepos=\"74:1-74:9\"\u003e\n\u003cspan id=\"特徴\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%89%B9%E5%BE%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e特徴\u003c/h2\u003e\n\u003ch3 data-sourcepos=\"76:1-76:8\"\u003e\n\u003cspan id=\"type\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#type\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003etype\u003c/h3\u003e\n\u003cp data-sourcepos=\"77:1-77:97\"\u003etypeキーワードは既存の型、型リテラルに別名をつけることができます。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"79:1-81:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"82:1-82:76\"\u003eは\u003ccode\u003eintSlice\u003c/code\u003eはint型のスライスである、と宣言を表します。\u003c/p\u003e\n\u003cp data-sourcepos=\"84:1-84:84\"\u003eこの特徴単独ではただ別名で型を宣言するだけになりますが、\u003c/p\u003e\n\u003cp data-sourcepos=\"86:1-86:69\"\u003e宣言した型にメソッドを追加することができます。\u003c/p\u003e\n\u003ch3 data-sourcepos=\"88:1-88:16\"\u003e\n\u003cspan id=\"レシーバ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AC%E3%82%B7%E3%83%BC%E3%83%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eレシーバ\u003c/h3\u003e\n\u003cp data-sourcepos=\"90:1-90:113\"\u003eGoは型にメソッドを追加でき、メソッドを追加する先のことをレシーバと言います。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"92:1-94:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eshuffle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"96:1-96:71\"\u003eこのように書くことで\u003ccode\u003eintSlice\u003c/code\u003eはshuffleメソッドを持ち\u003c/p\u003e\n\u003cp data-sourcepos=\"98:1-98:22\"\u003eintSlice型のarrayで\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"100:1-102:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshuffle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"104:1-104:64\"\u003eと記述するとshuffleを呼び出すことができます。\u003c/p\u003e\n\u003ch3 data-sourcepos=\"106:1-106:34\"\u003e\n\u003cspan id=\"スライスのメモリ管理\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E7%AE%A1%E7%90%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eスライスのメモリ管理\u003c/h3\u003e\n\u003cp data-sourcepos=\"108:1-108:104\"\u003eGoはスライスという可変長の配列のような型で宣言時にメモリを確保します。\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"110:1-112:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eslice\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"114:1-114:80\"\u003eとした場合は要素数0のため容量が0のスライスになります。\u003c/p\u003e\n\u003cp data-sourcepos=\"116:1-116:75\"\u003eスライスに対してappendをして確保した容量を超えた時に\u003c/p\u003e\n\u003cp data-sourcepos=\"118:1-118:153\"\u003e再度メモリを確保するため、使う長さが決まっている場合は先にその分のメモリを確保すると効率的になります。\u003c/p\u003e\n\u003cp data-sourcepos=\"120:1-120:84\"\u003eスライスで長さを指定するためには組み込み関数の\u003ccode\u003emake\u003c/code\u003eを使え\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"122:1-124:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eintSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"126:1-126:83\"\u003eと記述すると長さ1000のintSliceをarrayに宣言と代入ができます。\u003c/p\u003e\n\u003ch2 data-sourcepos=\"129:1-129:15\"\u003e\n\u003cspan id=\"多値返却\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%A4%9A%E5%80%A4%E8%BF%94%E5%8D%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e多値返却\u003c/h2\u003e\n\u003cp data-sourcepos=\"131:1-131:41\"\u003eGoは複数の値を返却できます。\u003c/p\u003e\n\u003cp data-sourcepos=\"133:1-133:73\"\u003eそのためソートでj-1番目とj番目を入れ替えるときには\u003c/p\u003e\n\u003cdiv class=\"code-frame\" data-lang=\"Go\" data-sourcepos=\"135:1-137:3\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp data-sourcepos=\"139:1-139:24\"\u003eと表現できます。\u003c/p\u003e\n\u003cp data-sourcepos=\"141:1-141:54\"\u003e\u003cqiita-embed-ogp src=\"https://qiita.com/official-events/ae80b010f51f7018891a\"\u003e\u003c/qiita-embed-ogp\u003e\u003c/p\u003e\n\u003ch1 data-sourcepos=\"143:1-143:11\"\u003e\n\u003cspan id=\"最後に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e最後に\u003c/h1\u003e\n\u003cp data-sourcepos=\"145:1-145:87\"\u003e我々ARISE analyticsはモダンな技術を取り入れて開発をしています。\u003c/p\u003e\n\u003cp data-sourcepos=\"147:1-147:97\"\u003e興味のある方はぜひ我々の\u003ca href=\"https://www.ariseanalytics.com/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHP\u003c/a\u003eを御覧ください。\u003c/p\u003e\n","body":"# はじめに\n\nこんにちは。\nARISE analyticsのエンジニアの井上です。\n\n弊社ARISE analyticsの技術ブログに先日Goについての記事を投稿しました。\n\nそのページは[こちら](https://www.ariseanalytics.com/activities/report/20220704/)\n\nこの記事ではサーバーサイド開発として使われるPHP, Javaと比較して\n\nGoの書き方とパフォーマンスについて語りました。\n\nベンチマークの比較を行う上で、なるべく処理方法を共通とするために\n\nGoらしさを排除した書き方をしました。\n\n\n本記事ではブログで紹介したGoらしくないソースコードを\n\n筆者が考えるGoらしいソースコードを紹介します。\n\n\n# Goらしいソースコード\n\nでは先にGoの特徴を踏まえたコードを見ていきましょう。\n\nまずはバブルソートの例です\n\n```Go:main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype intSlice []int\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tarray := make(intSlice, 0, 1000)\n\tfor i := 1; i \u003c= 1000; i++ {\n\t\tarray = append(array, i)\n\t}\n\tarray.shuffle()\n\n\tstart := time.Now()\n\tarray.bubbleSort()\n\tfmt.Println(time.Since(start).Microseconds())\n}\n\nfunc (s intSlice) shuffle() {\n\trand.Shuffle(len(s), func(i, j int) {\n\t\ts[i], s[j] = s[j], s[i]\n\t})\n}\n\nfunc (s intSlice) bubbleSort() {\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tfor j := 1; j \u003c len(s); j++ {\n\t\t\tif s[j-1] \u003e s[j] {\n\t\t\t\ts[j-1], s[j] = s[j], s[j-1]\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\nそれではここからはGoの特徴を4つ紹介します\n\n## 特徴\n\n### type \ntypeキーワードは既存の型、型リテラルに別名をつけることができます。\n\n```Go\ntype intSlice []int\n```\nは`intSlice`はint型のスライスである、と宣言を表します。\n\nこの特徴単独ではただ別名で型を宣言するだけになりますが、\n\n宣言した型にメソッドを追加することができます。\n\n### レシーバ\n\nGoは型にメソッドを追加でき、メソッドを追加する先のことをレシーバと言います。\n\n```Go\nfunc (s intSlice) shuffle()\n```\n\nこのように書くことで`intSlice`はshuffleメソッドを持ち\n\nintSlice型のarrayで\n\n```Go\narray.shuffle()\n```\n\nと記述するとshuffleを呼び出すことができます。\n\n### スライスのメモリ管理\n\nGoはスライスという可変長の配列のような型で宣言時にメモリを確保します。\n\n```Go\nvar slice []int\n```\n\nとした場合は要素数0のため容量が0のスライスになります。\n\nスライスに対してappendをして確保した容量を超えた時に\n\n再度メモリを確保するため、使う長さが決まっている場合は先にその分のメモリを確保すると効率的になります。\n\nスライスで長さを指定するためには組み込み関数の`make`を使え\n\n```Go\narray := make(intSlice, 0, 1000)\n```\n\nと記述すると長さ1000のintSliceをarrayに宣言と代入ができます。\n\n\n## 多値返却\n\nGoは複数の値を返却できます。\n\nそのためソートでj-1番目とj番目を入れ替えるときには\n\n```Go\ns[j-1], s[j] = s[j], s[j-1]\n```\n\nと表現できます。\n\nhttps://qiita.com/official-events/ae80b010f51f7018891a\n\n# 最後に\n\n我々ARISE analyticsはモダンな技術を取り入れて開発をしています。\n\n興味のある方はぜひ我々の[HP](https://www.ariseanalytics.com/)を御覧ください。\n","coediting":false,"comments_count":0,"created_at":"2022-09-11T17:29:05+09:00","group":null,"id":"a46e6f6f6cb232e03bfe","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Go","versions":[]}],"title":"ARISE tech blogのGoソースコードをもっとGoっぽく書いてみた","updated_at":"2022-09-11T17:42:30+09:00","url":"https://qiita.com/tsukasaI/items/a46e6f6f6cb232e03bfe","user":{"description":"","facebook_id":"","followees_count":1,"followers_count":2,"github_login_name":"tsukasaI","id":"tsukasaI","items_count":6,"linkedin_id":"","location":"","name":"Tsukasa INOUE","organization":"","permanent_id":655827,"profile_image_url":"https://avatars1.githubusercontent.com/u/65926267?v=4","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null,"team_membership":null}]
